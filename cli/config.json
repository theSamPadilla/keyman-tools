{
    "name": "Validator Key Management Tools",
    "main-file": "keyman-tools.py",
    "program-description": "Compilation of tools to manage keys in the target directory defined in the .env file.",
    "usage": {
        "global-flags": false,
        "commands": true,
        "command-flags": true,
        "subcommands": true,
        "subcommand-flags": true
    },
    "commands": {
        "secrets": {
            "description": {
                "short": "Manages CRUD operations for validator keystores on Google Cloud Secret Manager.",
                "long":  "The secrets command helps you create, delete, get, and alter Google Cloud Secret Manager secrets. See available subcommands for more info.It scans the <KEY_DIRECTORY_PATH> variable defined in the .env file and creates secrets in the Google Cloud <PROJECT_ID> also defined in the .env file.\nYou must create Google Cloud Application Default Credentials (ADC) to execute this command.\nSee more instructions on the README.md or https://cloud.google.com/docs/authentication/provide-credentials-adc."
            },
            "subcommand-logic": {
                "default": ""
            }, 
            "subcommands": {
                "create": {
                    "description": {
                        "short": "Creates Google Cloud Secret Manager secrets in two differnt modes.",
                          "long":  "The create subcommand helps you create Google Cloud Secret Manager secrets. It scans the <KEY_DIRECTORY_PATH> variable defined in the .env file and creates secrets in the Google Cloud <PROJECT_ID> also defined in the .env file.\nYou must create Google Cloud Application Default Credentials (ADC) to execute this command.\nSee more instructions on the README.md or https://cloud.google.com/docs/authentication/provide-credentials-adc."
                        },   
                    "subcommand-flags": {
                        "--secret-mode" : {
                            "values": {
                                "single": "Every keystore in the target directory will generate one secret entry on Google Cloud Secret Manager.\n\tMake sure the keystores are in the format <keystore-m_12381_3600_i_0_0-timestamp.json>, where 'i' is the key index.\n\tSecrets created will be named keystore-m_12381_3600_i_0_0-timestamp.",
                                "fat": "Creates 'fat' secrets containing multiple keystore data per secret.\n\tIt makes the secrets as close to the Google Cloud Secret Manager limit of 64kb per secret.\n\tMake sure the keystores are in the format <keystore-m_12381_3600_i_0_0-timestamp.json>, where 'i' is the key index.\n\tSecrets created will be named key-index_l_to_h, where 'l' is the lowest and 'h' the highest key index in that secret."
                            },
                            "default": "fat",
                            "description": "Defines the mode secrets get created."
                        },
                        "--skip": {
                            "values": {},
                            "default": false,
                            "description": "When this flag is passed, the tool will not overwrite existing keystore version with a new one.\nSet this flag if you want run the tool in multiple waves against the same key directory, and want to keep a uniform version across all the Secrets."
                        },
                        "--optimistic": {
                            "values": {},
                            "description": "When this flag is passed, it makes the tool not check the validator keystore cheksum with the checksum of the created secret.\nSet this flag if you choose not to give your service account secret access permissions (`secretmanager.versions.access`).",
                            "default": false
                        }
                    }
                },
                "get": {
                    "description": {
                        "short": "Gets Google Cloud Secret Manager secrets",
                        "long":  "The 'get' subcommand reads the latest version of one or many Google Cloud Secret Manager secrets in <PROJECT_ID>. It generates keystores files with the format <keystore-m_12381_3600_i_0_0-timestamp.json>, where 'i' is the key index, and stores them in an direcotry named 'imported_validator_keys' inside the 'OUTPUT_DIRECTORY' defined in the .env file."
                        },   
                    "subcommand-flags": {
                        "--secret-name" : {
                            "values": {
                                "": "Any existing secret name."
                            },
                            "default": "",
                            "description": "The name of the keystore file to get."
                        },
                        "--from-file": {
                            "values": {
                                "": "Any valid path."
                            },
                            "default": "",
                            "description": "Path to a .txt file containing the name of all secret names to fetch.\nGreat to use with output files generated by this tool."
                        },
                        "--index-range": {
                            "values": {
                                "": ""
                            },
                            "default": "",
                            "description": "Key index range to fetch.\nValue must be in format '<low-index>_<high-index>. For example '--index-range=0-99'.\nWorks only for secrets with format key-index_l_to_h, where 'l' is the lowest and 'h' the highest key index in that secret.\nMake sure that there is no secret key range overlap on Google Cloud Secret Manager or this will cause key conflicts."
                        }
                    }
                },
                "delete": {
                    "description": {
                        "short": "Deletes Google Cloud Secret Manager secrets.",
                        "long":  "The 'delete' subcommand prompts you for confirmation to delete secrets from Google Cloud Secret Manager in <PROJECT_ID> defined in the .env file. It deletes the secrets that match the provided flags. See subcommand flag options for more information."
                        },   
                    "subcommand-flags": {
                        "--secret-name" : {
                            "values": {
                                "": "Any existing secret name."
                            },
                            "default": "",
                            "description": "This flag will delete the exact secret that matches the provided name. If this flag is present, it will take presedence over other delete flags and instructions."
                        },
                        "--pattern": {
                            "values": {
                                "keystore": "Deletes all secrets on Google Cloud Secret Manager matching the <keystore-m_12381_3600_*_0_0-timestamp> format.",
                                "index-range": "Deletes all secrets on Google Cloud Secret Manager matching the <key-index_*_to_*> format."
                            },
                            "default": "",
                            "description": "This flag will delete all secrets that match the provided format. Be careful about using this flag as it will delete keys in bulk."
                        },
                        "--skip-confirmation": {
                            "values": {},
                            "default": false,
                            "description": "If present, the tool will NOT prompt you for confirmation before deleting the secrets. Be very careful about passing this flag."
                        }
                    }
                }
            },
            "command-flags": {
                "--help": {
                    "description": {
                        "short": "Prints help for secrets command.",
                        "long": "Prints help for secrets command."
                    },
                    "default": "",
                    "values": {}
                }
            }
        },
        "web3signer": {
            "description": {
                "short": "Manages installation, config creation, and other actions for web3signer.",
                "long": "The web3signer command enables you to automate the installation, configuration, and startup of web3signer and related dependencies such as the slashing-protection database."
            },
            "subcommand-logic": {
                "default": ""
            },
            "subcommands": {
                "install": {
                    "description": {
                        "short": "Installs web3signer for you.",
                        "long": "Install web3signer and docker using built-in bash scripts. It pulls web3signer with the latest binary."
                    },
                    "subcommand-flags": {
                        "--linux-distro": {
                            "values": {
                                "ubuntu": "Installs docker for an ubuntu distribution.",
                                "debian": "Installs docker for a debian distribution."
                            },
                                "default": "",
                                "description": "When this flag is present, the tool will install docker for the specified distribution."
                        }
                    }
                },
                "keys-config": {
                    "description": {
                        "short": "Creates a keystore configuration file for web3signer using the keystore files in path passed to the command.",
                        "long": "The 'keys-config' subcommand creates a keystore configuration file for web3signer as defined in https://docs.web3signer.consensys.net/reference/key-config-file-params#keystore-file."
                    },
                    "subcommand-flags": {
                        "--keystore-path": {
                            "values": {
                                "": "Any valid path."
                            },
                            "default": "",
                            "description": "[Required]\nA path to the directory containing all the keys to write to the keystore configuration file for web3signer."
                        },
                        "--password-file-path": {
                            "values": {
                                "": "Path to the password file to decrypt the keystore."
                            },
                            "default": "",
                            "description": "[Required]\nThe path to a file containing the password to decrypt all the keystores getting written to the config file in this pass.\n\tYou can write keys to the same configuration file with different passwords by running the command multiple times and pointing it to different key directories with their respective decryption passwords."
                        },
                        "--output-file-path": {
                            "values": {
                                "": "Path to the configuration file."
                            },
                            "default": "",
                            "description": "[Required]\nA path to the output configuration file. If the file does not exist, it will create it. If the file exists, it will append the key configuration to the contents of the file."
                        },
                        "--key-type": {
                            "values": {
                                "BLS": "Use for BLS flags.",
                                "SECP256K1": "Use for SECP256K1 flags."
                            },
                            "default": "BLS",
                            "description": "The type of flag as defined in https://docs.web3signer.consensys.net/reference/key-config-file-params#keystore-file."
                        }
                    }
                },
                "setup-db": {
                    "description": {
                        "short": "Starts up the slashing protection database.",
                        "long": "Starts up the slashing protection database using built-in bash scripts.\nIt runs the db on docker, listening to localhost:5432, and it applies the db migrations."
                    },
                    "subcommand-flags": {
                        "--db-user": {
                            "values": {
                                "": ""
                            },
                            "default": "postgres",
                            "description": "The user for the db."
                        },
                        "--db-password": {
                            "values": {
                                "": "A value"
                            },
                            "default": "db_password",
                            "description": "The password value for the db.\nAlthough the database listens only on localhost, it is recommended to change the default password for added security."
                        }
                    }
                },
                "run": {
                    "description": {
                        "short": "Runs web3signer.",
                        "long": "Starts web3signer."
                    },
                    "subcommand-flags": {}
                }
            },
            "command-flags": {
                "--authorize-bash": {
                    "description": {
                        "short": "Skips authorization prompt before executing bash scripts.",
                        "long": "When this flag is passed, the tool will not prompt for confirmation before executing bash scripts.\nOnly pass this flag if you trust the code that will get executed."
                    },
                    "default": false,
                    "values": {}
                },
                "--help": {
                    "description": {
                        "short": "Prints help for web3signer command.",
                        "long": ""
                    },
                    "default": "",
                    "values": {}
                }
            }
        },
        "help": {
            "description": {
                "short": "Prints help for the tool.",
                "long": ""
            },
            "subcommand-logic": {"default": ""}, 
            "subcommands": {},
            "command-flags": {}
        }
    },
    "global-flags": {}
}